//=============================================================================
//
// puzzle処理 [puzzle.cpp]
// Author : masayasu wakita
//
//=============================================================================
#include "puzzle.h"
#include "fade.h"
#include "renderer.h"
#include "scene.h"
#include "manager.h"
#include "inputKeyboard.h"

//=============================================================================
// 静的メンバ変数
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CPuzzle::CPuzzle()
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CPuzzle::~CPuzzle()
{

}

//=============================================================================
//Init処理
//=============================================================================
HRESULT CPuzzle::Init(void)
{

	// 各種アセットの生成＆設置
	//CMeshField::LoadRand("data/stage/rand.csv", false);				// 床情報の読込
	//CObject::LoadModel("data/stage/object.csv");					// モデル情報の読込
	//CEnemy::LoadEnemy("data/stage/enemy.csv");						// 敵情報の読込


	return S_OK;
}

//=============================================================================
// Update関数
//=============================================================================
void CPuzzle::Update(void)
{
#ifdef _DEBUG
	CInputKeyboard *pKeyboard = CManager::GetInputKeyboard();

	////ゲームの遷移
	//if (pKeyboard->GetTriggerKeyboard(DIK_RETURN))
	//{//エンターキーが押されたとき
	//	if (CFade::GetFade() == CFade::FADE_NONE)
	//	{//フェードが処理をしていないとき
	//		CResult::SetIdxKill(15);			// Kill数をリザルトに渡す
	//		//フェードを入れる
	//		CFade::SetFade(CManager::MODE_RESULT);
	//	}
	//}

	// ボスへのショートカット
	if (pKeyboard->GetTriggerKeyboard(DIK_B))
	{

	}
#endif
}

//=============================================================================
// Draw関数
//=============================================================================
void CPuzzle::Draw(void)
{

}

//=============================================================================
// Uninit関数
//=============================================================================
void CPuzzle::Uninit(void)
{
	// ポリゴンの開放
	CScene::ReleaseAll();
}

//=============================================================================
// アセットの読み込み
//=============================================================================
void CPuzzle::LoadAsset(void)
{

}